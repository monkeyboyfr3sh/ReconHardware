/*
 * SD.c
 *
 *  Created on: Mar 19, 2021
 *      Author: monke
 */
#include "SD.h"


/* Transfers a file from SD card into memory */
u32 *SD_Transfer(char *FileName){
    FIL fil;
    UINT br;
    FRESULT result;
    u32 file_size;
    u32 *return_addr=0;

    xil_printf("Opening %s ", FileName );
    result = f_open(&fil, FileName, FA_READ);
    if ( result ){
        xil_printf("Failed with ERROR: %d \n\r", result);
        return return_addr;
    }
    file_size = f_size(&fil);
    if(file_size<=0){
    	xil_printf("AHH CANT USE THIS FILE\r\n");
    	return return_addr;
    }

    return_addr = malloc(file_size);
    if(return_addr<=0){
    	return return_addr;
    }

    xil_printf("... OK\n\r");
    result = f_lseek(&fil, 0);
    if ( result ){
        xil_printf("Moving file pointer of the file object: Failed with ERROR: %d \n\r", result);
        return 0;
    }
    xil_printf("Reading file %s of 0x%x Bytes to 0x%x ", FileName, file_size, return_addr);
    result = f_read(&fil, (void*) return_addr, file_size, &br);
    if ( result ){
        xil_printf(": Failed with ERROR: %d \n\r", result);
        return 0;
    }
    xil_printf("... OK\n\r");
    xil_printf("Closing %s ", FileName);
    result = f_close(&fil);
    if ( result ){
        xil_printf(": Failed with ERROR: %d \n\r", result);
        return 0;
    }
    xil_printf("... OK\n\r");
    return return_addr;
}
u32 *Read_CSV(char *FileName){
    FIL fil;
    UINT br;
    FRESULT result;
    u32 file_size;

    xil_printf("Opening %s ", FileName );
    result = f_open(&fil, FileName, FA_READ);
    if ( result ){
        xil_printf("Failed with ERROR: %d \n\r", result);
        return 0;
    }
    file_size = f_size(&fil);
    if(file_size<=0){
    	xil_printf("AHH CANT USE THIS FILE\r\n");
    	return 0;
    }
    u32 return_addr = malloc(file_size);
    if(return_addr<=0){
    	return 0;
    }



	struct my_record records[100];
	size_t count = 0;
	for (; count < sizeof(records)/sizeof(records[0]); ++count)
	{
	    int got = fscanf(my_file, "%c,%d", &records[count].name, &records[count].value);
	    if (got != 2) break; // wrong number of tokens - maybe end of file
	}
	fclose(my_file);
}
/* Mounts the SD card */
int SD_Init(){
    static FATFS fatfs;
    FRESULT result;
    xil_printf("Mounting SD ");
    result = f_mount(&fatfs, "", 0);
    if ( result != XST_SUCCESS){
        xil_printf("Failed with ERROR: %d", result);
        return XST_FAILURE;
    }
    xil_printf("... OK\n\r");
    return XST_SUCCESS;
}
