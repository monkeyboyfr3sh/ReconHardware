/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xgpio.h"
#include "sleep.h"

XGpio GPIO_Arr[6];

void driverInit() {
	int status;

	status = XGpio_Initialize(&GPIO_Arr[0], XPAR_AXI_GPIO_0_DEVICE_ID);
	if (status != XST_SUCCESS) {
		printf("GPIO %d Initalization failed\n\r",0);
	} else {
		printf("GPIO %d Initialization successful\n\r",0);
	}

	status = XGpio_Initialize(&GPIO_Arr[2], XPAR_AXI_GPIO_2_DEVICE_ID);
	if (status != XST_SUCCESS) {
		printf("GPIO %d Initalization failed\n\r",2);
	} else {
		printf("GPIO %d Initialization successful\n\r",2);
	}

	status = XGpio_Initialize(&GPIO_Arr[3], XPAR_AXI_GPIO_3_DEVICE_ID);
	if (status != XST_SUCCESS) {
		printf("GPIO %d Initalization failed\n\r",3);
	} else {
		printf("GPIO %d Initialization successful\n\r",3);
	}

	status = XGpio_Initialize(&GPIO_Arr[4], XPAR_AXI_GPIO_4_DEVICE_ID);
	if (status != XST_SUCCESS) {
		printf("GPIO %d Initalization failed\n\r",4);
	} else {
		printf("GPIO %d Initialization successful\n\r",4);
	}

	status = XGpio_Initialize(&GPIO_Arr[5], XPAR_AXI_GPIO_5_DEVICE_ID);
	if (status != XST_SUCCESS) {
		printf("GPIO %d Initalization failed\n\r",5);
	} else {
		printf("GPIO %d Initialization successful\n\r",5);
	}
}

void configGpio() {

	//Outputs
	XGpio_SetDataDirection(&GPIO_Arr[0], 1, 0);//Clk
	XGpio_SetDataDirection(&GPIO_Arr[0], 1, 0);//Rst

	XGpio_SetDataDirection(&GPIO_Arr[2], 1, 0);//dataIn0
	XGpio_SetDataDirection(&GPIO_Arr[2], 2, 0);//dataIn1

	XGpio_SetDataDirection(&GPIO_Arr[3], 1, 0);//mStart

	//Inputs
	XGpio_SetDataDirection(&GPIO_Arr[4], 1, 1);//product
	XGpio_SetDataDirection(&GPIO_Arr[5], 1, 1);//mReady

	//Tie outputs off
	XGpio_DiscreteSet(&GPIO_Arr[0], 1, 0);
	XGpio_DiscreteSet(&GPIO_Arr[0], 2, 1);//Rst needs to be high

	XGpio_DiscreteSet(&GPIO_Arr[2], 1, 0);
	XGpio_DiscreteSet(&GPIO_Arr[2], 1, 0);

	XGpio_DiscreteSet(&GPIO_Arr[2], 1, 0);

	printf("GPIO Configured successfully\r\n\n");
}

void ioclk(){
	//Set pin high
	XGpio_DiscreteSet(&GPIO_Arr[0], 1, 1);
	//Set pin low
	XGpio_DiscreteClear(&GPIO_Arr[0], 1, 1);

}

int print_value(){
	int product,mReady;
	product = XGpio_DiscreteRead(&GPIO_Arr[4],1);
	mReady =  XGpio_DiscreteRead(&GPIO_Arr[5],1);

	printf("product		= %d\n",product);
	printf("mReady 		= %d\n",mReady);

	return mReady;
}

void multiply_values(int input_val0,int input_val1){
	printf("Computing %d x %d\n",input_val0,input_val1);

	//Clear previous vals
	XGpio_DiscreteClear(&GPIO_Arr[2], 1, 0xFFFF);
	XGpio_DiscreteClear(&GPIO_Arr[2], 2, 0xFFFF);

	//Set multiplier and multiplicand
	XGpio_DiscreteSet(&GPIO_Arr[2], 1, input_val0);
	XGpio_DiscreteSet(&GPIO_Arr[2], 2, input_val1);

	//Set mStart
	XGpio_DiscreteSet(&GPIO_Arr[3], 1, input_val1);

	//Clear previous input value
	XGpio_DiscreteClear(&GPIO_Arr[4], 1, 0xFFFF);
	//Write input value to buffer input
	XGpio_DiscreteSet(&GPIO_Arr[4], 1, input_val);

	//clk
	ioclk(2);

	/*Debug code stuff, no worries here
	for(int i = 0;i<10;i++){
		ioclk(2);
		print_value();
	}
	*/
}
read_buffer(){
	printf("\nReading buffer\n");

	//Set rd high
	XGpio_DiscreteSet(&GPIO_Arr[3], 1, 1);
	int read_cnt = 0;
	int empty = 0;
	while(empty == 0){
		printf("Read %d\n",read_cnt);
		empty = print_value();
		read_cnt++;
		ioclk(1);
	}

	//Set rd low
	XGpio_DiscreteClear(&GPIO_Arr[3], 1, 1);
}
int main()
{
    init_platform();

    printf("Hello World\n");

    driverInit();
    configGpio();

    for(int i = 0;i<15;i++){
    	load_value(i);
    }

    read_buffer();

    cleanup_platform();
    return 0;
}
