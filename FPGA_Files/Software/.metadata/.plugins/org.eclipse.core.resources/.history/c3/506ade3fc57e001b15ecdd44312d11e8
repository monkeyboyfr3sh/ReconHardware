///******************************************************************************
//*
//* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
//*
//* Permission is hereby granted, free of charge, to any person obtaining a copy
//* of this software and associated documentation files (the "Software"), to deal
//* in the Software without restriction, including without limitation the rights
//* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//* copies of the Software, and to permit persons to whom the Software is
//* furnished to do so, subject to the following conditions:
//*
//* The above copyright notice and this permission notice shall be included in
//* all copies or substantial portions of the Software.
//*
//* Use of the Software is limited solely to applications:
//* (a) running on a Xilinx device, or
//* (b) that interact with a Xilinx device through a bus or interconnect.
//*
//* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
//* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
//* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
//* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//* SOFTWARE.
//*
//* Except as contained in this notice, the name of the Xilinx shall not be used
//* in advertising or otherwise to promote the sale, use or other dealings in
//* this Software without prior written authorization from Xilinx.
//*
//******************************************************************************/
//
///*
// * helloworld.c: simple test application
// *
// * This application configures UART 16550 to baud rate 9600.
// * PS7 UART (Zynq) is not initialized by this application, since
// * bootrom/bsp configures it to baud rate 115200
// *
// * ------------------------------------------------
// * | UART TYPE   BAUD RATE                        |
// * ------------------------------------------------
// *   uartns550   9600
// *   uartlite    Configurable only in HW design
// *   ps7_uart    115200 (configured by bootrom/bsp)
// */
//
//#include <stdio.h>
//#include "platform.h"
//#include "xil_printf.h"
//#include "xparameters.h"
//#include "xil_printf.h"
//#include "xgpio.h"
//#include "xil_io.h"
//#include "xil_types.h"
//#include "ff.h"
//
//int main()
//{
//    init_platform();
//
//    SD_Init();
//    SD_Transfer("left.bin", 0x1880000, 146536);
//
//    print("Hello World\n\r");
//    print("Successfully ran Hello World application");
//    cleanup_platform();
//    return 0;
//}
//int SD_Transfer(char *FileName, u32 distAddr, u32 size){
//    FIL fil;
//    UINT br;
//    FRESULT result;
//    xil_printf("Opening %s ", FileName );
//    result = f_open(&fil, FileName, FA_READ);
//    if ( result ){
//        xil_printf("Failed with ERROR: %d \n\r", result);
//        return XST_FAILURE;
//    }
//    xil_printf("... OK\n\r");
//    result = f_lseek(&fil, 0);
//    if ( result ){
//        xil_printf("Moving file pointer of the file object: Failed with ERROR: %d \n\r", result);
//        return XST_FAILURE;
//    }
//    xil_printf("Reading file %s of %d Bytes to 0x%x ", FileName, size, distAddr);
//    result = f_read(&fil, (void*) distAddr, size, &br);
//    if ( result ){
//        xil_printf(": Failed with ERROR: %d \n\r", result);
//        return XST_FAILURE;
//    }
//    xil_printf("... OK\n\r");
//    xil_printf("Closing %s ", FileName);
//    result = f_close(&fil);
//    if ( result ){
//        xil_printf(": Failed with ERROR: %d \n\r", result);
//        return XST_FAILURE;
//    }
//    xil_printf("... OK\n\r");
//    return XST_SUCCESS;
//}
//
//int SD_Init(){
//    static FATFS fatfs;
//    FRESULT result;
//    xil_printf("Mounting SD ");
//    result = f_mount(&fatfs, "", 0);
//    if ( result != XST_SUCCESS){
//        xil_printf("Failed with ERROR: %d", result);
//        return XST_FAILURE;
//    }
//    xil_printf("... OK\n\r");
//    return XST_SUCCESS;
//}

/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * prc_demo.c: simple prc_demo application
 *
 * This application configures UART 16550 to baud rate 115200.
 */

#include <stdio.h>
#include "platform.h"
#include "xparameters.h"
#include "xil_printf.h"
#include "ff.h"
#include "xil_io.h"
#include "xprc.h"

// VSM IDs
#define XPRC_VS_SHIFT_ID 0

// RM IDs
#define XPRC_VS_SHIFT_RM_SHIFT_LEFT_ID 0
#define XPRC_VS_SHIFT_RM_SHIFT_RIGHT_ID 1

// RM Mem Addr
#define PARTIAL_SPI_SHIFT_LEFT_ADDR		XPAR_PS7_RAM_0_S_AXI_BASEADDR+0x1A3A00
#define PARTIAL_SPI_SHIFT_RIGHT_ADDR	XPAR_PS7_RAM_0_S_AXI_BASEADDR+0x1A8E80


// RM Sizes
#define PARTIAL_SHIFT_LEFT_RM_SIZE 146536
#define PARTIAL_SHIFT_RIGHT_RM_SIZE 146536

int main()
{

  u32 copy_status;

  u32 Exit   = 0;
  u32 Option = 1;

  //For PRC
  u32 sd_init;
  u32 prc_init;
  u32 prc_status;
  u32 prc_status_state;
  u32 prc_status_last_state;
  u32 prc_status_err;
  XPrc Prc;
  XPrc_Config *XPrcCfgPtr;

  init_platform();

  // Initialize SD card
  sd_init = SD_Init();
  if(sd_init != XST_SUCCESS){
	  return XST_FAILURE;
  }

  // DFX Driver initialize
  XPrcCfgPtr = XPrc_LookupConfig(XPAR_DFX_CONTROLLER_0_DEVICE_ID);
  if (NULL == XPrcCfgPtr) {
    return XST_FAILURE;
  }

  // Init DFX controller
  prc_init = XPrc_CfgInitialize(&Prc, XPrcCfgPtr, XPrcCfgPtr->BaseAddress);
  if (prc_init != XST_SUCCESS) {
    return XST_FAILURE;
  }

  // Putting shift VS into shutdown
  XPrc_SendShutdownCommand(&Prc, XPRC_VS_SHIFT_ID);
  while(XPrc_IsVsmInShutdown(&Prc, XPRC_VS_SHIFT_ID)==XPRC_SR_SHUTDOWN_OFF);

  // Setting shift RMs
  XPrc_SetBsSize   (&Prc, XPRC_VS_SHIFT_ID, XPRC_VS_SHIFT_RM_SHIFT_LEFT_ID,  PARTIAL_SHIFT_LEFT_RM_SIZE);
  XPrc_SetBsSize   (&Prc, XPRC_VS_SHIFT_ID, XPRC_VS_SHIFT_RM_SHIFT_RIGHT_ID, PARTIAL_SHIFT_RIGHT_RM_SIZE);
  XPrc_SetBsAddress(&Prc, XPRC_VS_SHIFT_ID, XPRC_VS_SHIFT_RM_SHIFT_LEFT_ID,  PARTIAL_SPI_SHIFT_LEFT_ADDR);
  XPrc_SetBsAddress(&Prc, XPRC_VS_SHIFT_ID, XPRC_VS_SHIFT_RM_SHIFT_RIGHT_ID, PARTIAL_SPI_SHIFT_RIGHT_ADDR);

  // Restart shift VS
  XPrc_SendRestartWithNoStatusCommand(&Prc, XPRC_VS_SHIFT_ID);
  while(XPrc_IsVsmInShutdown(&Prc, XPRC_VS_SHIFT_ID)==XPRC_SR_SHUTDOWN_ON);

  // Copy SD data to DDR4
  print("\r\nCopying QSPI content to DDR4...\r\n");
  copy_status = SD_Transfer("left.bin", PARTIAL_SPI_SHIFT_LEFT_ADDR, PARTIAL_SHIFT_LEFT_RM_SIZE);
  if (copy_status != XST_SUCCESS) {
    return XST_FAILURE;
  }

  cleanup_platform();
  return 0;
}

int SD_Transfer(char *FileName, u32 distAddr, u32 size){
    FIL fil;
    UINT br;
    FRESULT result;
    xil_printf("Opening %s ", FileName );
    result = f_open(&fil, FileName, FA_READ);
    if ( result ){
        xil_printf("Failed with ERROR: %d \n\r", result);
        return XST_FAILURE;
    }
    xil_printf("... OK\n\r");
    result = f_lseek(&fil, 0);
    if ( result ){
        xil_printf("Moving file pointer of the file object: Failed with ERROR: %d \n\r", result);
        return XST_FAILURE;
    }
    xil_printf("Reading file %s of %d Bytes to 0x%x ", FileName, size, distAddr);
    result = f_read(&fil, (void*) distAddr, size, &br);
    if ( result ){
        xil_printf(": Failed with ERROR: %d \n\r", result);
        return XST_FAILURE;
    }
    xil_printf("... OK\n\r");
    xil_printf("Closing %s ", FileName);
    result = f_close(&fil);
    if ( result ){
        xil_printf(": Failed with ERROR: %d \n\r", result);
        return XST_FAILURE;
    }
    xil_printf("... OK\n\r");
    return XST_SUCCESS;
}

int SD_Init(){
    static FATFS fatfs;
    FRESULT result;
    xil_printf("Mounting SD ");
    result = f_mount(&fatfs, "", 0);
    if ( result != XST_SUCCESS){
        xil_printf("Failed with ERROR: %d", result);
        return XST_FAILURE;
    }
    xil_printf("... OK\n\r");
    return XST_SUCCESS;
}
