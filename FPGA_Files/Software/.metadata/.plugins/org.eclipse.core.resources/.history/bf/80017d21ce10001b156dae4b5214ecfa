/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include "platform.h"
#include "xil_printf.h"
#include "xgpio.h"
#include "xparameters.h"
#include "xtime_l.h"
#include "sleep.h"
#include "bmp.c"

#include <math.h>
#define DATA_OFFSET_OFFSET 0x000A
#define WIDTH_OFFSET 0x0012
#define HEIGHT_OFFSET 0x0016
#define BITS_PER_PIXEL_OFFSET 0x001C
#define HEADER_SIZE 14
#define INFO_HEADER_SIZE 40
#define NO_COMPRESION 0
#define MAX_NUMBER_OF_COLORS 0
#define ALL_COLORS_REQUIRED 0

typedef unsigned int int32;
typedef short int16;
typedef unsigned char byte;

//***Inputs*****
//fileName: The name of the file to open
//***Outputs****
//pixels: A pointer to a byte array. This will contain the pixel data
//width: An int pointer to store the width of the image in pixels
//height: An int pointer to store the height of the image in pixels
//bytesPerPixel: An int pointer to store the number of bytes per pixel that are used in the image
void ReadBMP(const char *fileName,byte **pixels, int32 *width, int32 *height, int32 *bytesPerPixel)
{
        //Open the file for reading in binary mode
        FILE *imageFile = fopen(fileName, "rb");
        //Read data offset
        int32 dataOffset;
        fseek(imageFile, DATA_OFFSET_OFFSET, SEEK_SET);
        fread(&dataOffset, 4, 1, imageFile);
        //Read width
        fseek(imageFile, WIDTH_OFFSET, SEEK_SET);
        fread(width, 4, 1, imageFile);
        //Read height
        fseek(imageFile, HEIGHT_OFFSET, SEEK_SET);
        fread(height, 4, 1, imageFile);
        //Read bits per pixel
        int16 bitsPerPixel;
        fseek(imageFile, BITS_PER_PIXEL_OFFSET, SEEK_SET);
        fread(&bitsPerPixel, 2, 1, imageFile);
        //Allocate a pixel array
        *bytesPerPixel = ((int32)bitsPerPixel) / 8;

        //Rows are stored bottom-up
        //Each row is padded to be a multiple of 4 bytes.
        //We calculate the padded row size in bytes
        int paddedRowSize = (int)(4 * ceil((float)(*width) / 4.0f))*(*bytesPerPixel);
        //We are not interested in the padded bytes, so we allocate memory just for
        //the pixel data
        int unpaddedRowSize = (*width)*(*bytesPerPixel);
        //Total size of the pixel data in bytes
        int totalSize = unpaddedRowSize*(*height);
        *pixels = (byte*)malloc(totalSize);
        //Read the pixel data Row by Row.
        //Data is padded and stored bottom-up
        int i = 0;
        //point to the last row of our pixel array (unpadded)
        byte *currentRowPointer = *pixels+((*height-1)*unpaddedRowSize);
        for (i = 0; i < *height; i++)
        {
                //put file cursor in the next row from top to bottom
	        fseek(imageFile, dataOffset+(i*paddedRowSize), SEEK_SET);
	        //read only unpaddedRowSize bytes (we can ignore the padding bytes)
	        fread(currentRowPointer, 1, unpaddedRowSize, imageFile);
	        //point to the next row (from bottom to top)
	        currentRowPointer -= unpaddedRowSize;
        }

        fclose(imageFile);
}

//***Inputs*****
//fileName: The name of the file to save
//pixels: Pointer to the pixel data array
//width: The width of the image in pixels
//height: The height of the image in pixels
//bytesPerPixel: The number of bytes per pixel that are used in the image
void WriteBMP(const char *fileName, byte *pixels, int32 width, int32 height,int32 bytesPerPixel)
{
        //Open file in binary mode
        FILE *outputFile = fopen(fileName, "wb");
        //*****HEADER************//
        //write signature
        const char *BM = "BM";
        fwrite(&BM[0], 1, 1, outputFile);
        fwrite(&BM[1], 1, 1, outputFile);
        //Write file size considering padded bytes
        int paddedRowSize = (int)(4 * ceil((float)width/4.0f))*bytesPerPixel;
        int32 fileSize = paddedRowSize*height + HEADER_SIZE + INFO_HEADER_SIZE;
        fwrite(&fileSize, 4, 1, outputFile);
        //Write reserved
        int32 reserved = 0x0000;
        fwrite(&reserved, 4, 1, outputFile);
        //Write data offset
        int32 dataOffset = HEADER_SIZE+INFO_HEADER_SIZE;
        fwrite(&dataOffset, 4, 1, outputFile);

        //*******INFO*HEADER******//
        //Write size
        int32 infoHeaderSize = INFO_HEADER_SIZE;
        fwrite(&infoHeaderSize, 4, 1, outputFile);
        //Write width and height
        fwrite(&width, 4, 1, outputFile);
        fwrite(&height, 4, 1, outputFile);
        //Write planes
        int16 planes = 1; //always 1
        fwrite(&planes, 2, 1, outputFile);
        //write bits per pixel
        int16 bitsPerPixel = bytesPerPixel * 8;
        fwrite(&bitsPerPixel, 2, 1, outputFile);
        //write compression
        int32 compression = NO_COMPRESION;
        fwrite(&compression, 4, 1, outputFile);
        //write image size (in bytes)
        int32 imageSize = width*height*bytesPerPixel;
        fwrite(&imageSize, 4, 1, outputFile);
        //write resolution (in pixels per meter)
        int32 resolutionX = 11811; //300 dpi
        int32 resolutionY = 11811; //300 dpi
        fwrite(&resolutionX, 4, 1, outputFile);
        fwrite(&resolutionY, 4, 1, outputFile);
        //write colors used
        int32 colorsUsed = MAX_NUMBER_OF_COLORS;
        fwrite(&colorsUsed, 4, 1, outputFile);
        //Write important colors
        int32 importantColors = ALL_COLORS_REQUIRED;
        fwrite(&importantColors, 4, 1, outputFile);
        //write data
        int i = 0;
        int unpaddedRowSize = width*bytesPerPixel;
        for ( i = 0; i < height; i++)
        {
                //start writing from the beginning of last row in the pixel array
                int pixelOffset = ((height - i) - 1)*unpaddedRowSize;
                fwrite(&pixels[pixelOffset], 1, paddedRowSize, outputFile);
        }
        fclose(outputFile);
}

XGpio GPIO_Arr[7];

void driverInit() {
	int status;

	status = XGpio_Initialize(&GPIO_Arr[0], XPAR_AXI_GPIO_0_DEVICE_ID);
	if (status != XST_SUCCESS) {
		printf("GPIO %d Initalization failed\n\r",0);
	} else {
		printf("GPIO %d Initialization successful\n\r",0);
	}

	status = XGpio_Initialize(&GPIO_Arr[1], XPAR_AXI_GPIO_1_DEVICE_ID);
	if (status != XST_SUCCESS) {
		printf("GPIO %d Initalization failed\n\r",1);
	} else {
		printf("GPIO %d Initialization successful\n\r",1);
	}

	status = XGpio_Initialize(&GPIO_Arr[2], XPAR_AXI_GPIO_2_DEVICE_ID);
	if (status != XST_SUCCESS) {
		printf("GPIO %d Initalization failed\n\r",2);
	} else {
		printf("GPIO %d Initialization successful\n\r",2);
	}

	status = XGpio_Initialize(&GPIO_Arr[3], XPAR_AXI_GPIO_3_DEVICE_ID);
	if (status != XST_SUCCESS) {
		printf("GPIO %d Initalization failed\n\r",3);
	} else {
		printf("GPIO %d Initialization successful\n\r",3);
	}

	status = XGpio_Initialize(&GPIO_Arr[4], XPAR_AXI_GPIO_4_DEVICE_ID);
	if (status != XST_SUCCESS) {
		printf("GPIO %d Initalization failed\n\r",4);
	} else {
		printf("GPIO %d Initialization successful\n\r",4);
	}

	status = XGpio_Initialize(&GPIO_Arr[5], XPAR_AXI_GPIO_5_DEVICE_ID);
	if (status != XST_SUCCESS) {
		printf("GPIO %d Initalization failed\n\r",5);
	} else {
		printf("GPIO %d Initialization successful\n\r",5);
	}

	status = XGpio_Initialize(&GPIO_Arr[6], XPAR_AXI_GPIO_6_DEVICE_ID);
	if (status != XST_SUCCESS) {
		printf("GPIO %d Initalization failed\n\r",6);
	} else {
		printf("GPIO %d Initialization successful\n\r",6);
	}

}

void configGpio() {

	//Outputs			//(	*GPIO,			port,	dir	);//Name
	XGpio_SetDataDirection(	&GPIO_Arr[0], 	1, 		0 	);//io_lk
	XGpio_SetDataDirection(	&GPIO_Arr[0], 	2, 		0	);//Rst

	XGpio_SetDataDirection(	&GPIO_Arr[1], 	1, 		0	);//bufferInput

	XGpio_SetDataDirection(	&GPIO_Arr[2], 	1, 		0	);//cStart
	XGpio_SetDataDirection(	&GPIO_Arr[2], 	2, 		0	);//newline

	XGpio_SetDataDirection(	&GPIO_Arr[3], 	1, 		0	);//wr
	XGpio_SetDataDirection(	&GPIO_Arr[3], 	2, 		0	);//rd

	//Inputs
	XGpio_SetDataDirection(	&GPIO_Arr[4], 	1, 		1	);//bufferOut

	XGpio_SetDataDirection(	&GPIO_Arr[5], 	1, 		1	);//FULL_in
	XGpio_SetDataDirection(	&GPIO_Arr[5], 	2, 		1	);//EMPTY_in

	XGpio_SetDataDirection(	&GPIO_Arr[6], 	1, 		1	);//FULL_out
	XGpio_SetDataDirection(	&GPIO_Arr[6], 	2, 		1	);//EMPTY_out


	XGpio_DiscreteClear(&GPIO_Arr[0], 2, 1);

	printf("GPIO Configured successfully\r\n\n");
}
//clk the pin
void ioclk(){
	//Set pin high
	XGpio_DiscreteSet(&GPIO_Arr[0], 1, 1);
	//Set pin low
	XGpio_DiscreteClear(&GPIO_Arr[0], 1, 1);
}

int writeBuffer(int input_val){
	//Set wr
	XGpio_DiscreteSet(&GPIO_Arr[3], 1, 1);

	//Set bufferInput to input_val
	XGpio_DiscreteSet(&GPIO_Arr[1], 1, input_val);

	ioclk();

	//Clear ports after use
	XGpio_DiscreteClear(&GPIO_Arr[1], 1, input_val);
	XGpio_DiscreteClear(&GPIO_Arr[3], 1, 1);
	//printf("Loaded %d into buffer.\n",input_val);
	return input_val;
}

int readBuffer(){
	//Set rd
	XGpio_DiscreteSet(&GPIO_Arr[3], 2, 1);
	int buffout = XGpio_DiscreteRead(&GPIO_Arr[4], 1);
	//printf("Got %d from buffer.\n",buffout);

	ioclk();
	//Clear ports after use
	XGpio_DiscreteClear(&GPIO_Arr[3], 2, 1);

	return buffout;
}
void start_convolution(bool state){
	if(state){
		XGpio_DiscreteSet(&GPIO_Arr[2], 1, 1);
		printf("Setting cStart\n");
	} else {
		XGpio_DiscreteClear(&GPIO_Arr[2], 1, 1);
		printf("Clearing cStart\n");
	}
}
int run_convolution(){

	int filter[9];
	int data[9];

	//Set cStart
	start_convolution(1);

	for(int i = 0;i<9;i++){
		//writeBuffer(rand()%15);
	}

	//First set will need 9 data values
	for(int i = 0;i<9;i++){
		//writeBuffer(rand()%15);
	}


	//All other tests need data shifted, then load 3 data values
	for(int i = 0;i<9;i++){
		//Shift data values
		if(i<6){
		}

		//Add 3 more
		else {
		}
	}

	//Grab calculated from buffer
	int result = readBuffer();

	start_convolution(0);

	printf("Convolution complete, returning value = %d!\n",result);
	return result;
}

int main()
{
    init_platform();

    printf("Hello World\n");

    driverInit();
    configGpio();

    /*
    //Running stage
	XTime tStart, tEnd;

	//Runtime start
	XTime_GetTime(&tStart);
	run_convolution();
	//Runtime stop
	XTime_GetTime(&tEnd);
	*/        byte *pixels;
    int32 width;
    int32 height;
    int32 bytesPerPixel;
    ReadImage("img.bmp", &pixels, &width, &height,&bytesPerPixel);
    WriteImage("img2.bmp", pixels, width, height, bytesPerPixel);
    free(pixels);
    return 0;

	printf("Program Completed!\n");

    cleanup_platform();
    return 0;
}
